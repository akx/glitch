define "glitch", ["module_base", "fx_modules"], !(mb, modules)->
	settings = {
		width: 320
		height: 240
		scale: 2
		mode: "block"
		image: null
		fps: 30
		stats: false
		pause: false
	}

	sizeChange = !->
		width = canvas.width = 0 | settings.width
		height = canvas.height = 0 | settings.height
		canvas.style <<< {width: width * settings.scale, height: height * settings.scale}

	canvas = document.createElement "canvas"
		document.body.appendChild &
		context = &getContext "2d"

	sizeChange()

	gui = new dat.GUI()
	gui.add(settings, "width", 32, 1024).onFinishChange(!->sizeChange())
	gui.add(settings, "height", 32, 1024).onFinishChange(!->sizeChange())
	gui.add(settings, "scale", 0, 3).onFinishChange(!->sizeChange())
	gui.add(settings, "mode", <[ block image ]>)
	gui.add(settings, "fps", 0, 60).step(1)
	gui.add(settings, "stats")
	gui.add(settings, "pause")
	#gui.add({save:!->canvas.toBlob((blob)->saveAs(blob, "glitch.png"))}, "save")
	mb.addModulesToGUI(gui)

	fileInputDiv = document.createElement "div"
		&innerHTML = "<h2>Choose custom image</h2>"
		document.body.appendChild(&)
		fileInput = document.createElement "input"
			& <<< {type: "file"}
			&addEventListener("change", (!(e)->
				fileReader = new FileReader()
				fileReader.onload = !(event)->
					if (src=event.target?result) then
						image = document.createElement("img")
							&src = src
							&onload = !->
								settings.image = image
								settings.mode = "image"
				fileReader.readAsDataURL(e.target.files[0])
			), false)
			fileInputDiv.appendChild &

	moduleOrder = <[ ycbcrPre leaks sliceglitch noise bitbang bloom ycbcrPost tvsim ]>

	perf = window.performance || {}
	perf.now = perf.now || perf.mozNow || perf.msNow || perf.oNow || perf.webkitNow || (-> new Date().getTime())


	draw = !->
		if settings.mode == "image" and settings.image then
			context.drawImage(settings.image, 0, 0, canvas.width, canvas.height)
		else
			context.fillStyle = '#346434'
			context.fillRect(0, 0, canvas.width, canvas.height)
			context.fillStyle = '#FFAA00'
			t = +new Date() / 1000.0
			x = (t * 150) % canvas.width
			context.fillRect(x, 64, 115, 223)
		data = context.getImageData(0, 0, canvas.width, canvas.height)
		times = []
		for name of moduleOrder then
			if module = mb.modules[name] then
				t0 = perf.now()
				moduleSettings = mb.settings[name] || {}
				out = module.action(moduleSettings, context, data)
				data = out?data || data
				t1 = perf.now()
				times.push("#name: #{Math.round(1 * (t1 - t0))}")
		context.putImageData(data, 0, 0)
		if settings.stats
			context.font = "7pt arial"
			context.fillStyle = "white"
			context.beginPath()
			for t, y of times
				context.fillText(t, 5, 15 + y * 10)

	wrapDraw = !->
		if settings.fps <= 0 then
			requestAnimationFrame(wrapDraw)
		else
			setTimeout((!->wrapDraw()), 1000 / settings.fps)
		if not settings.pause then draw()

	window.testDraw = testDraw = !->
		console.time("draw")
		for x from 0 til 100 => draw()
		console.timeEnd("draw")

	#testDraw()
	wrapDraw()

#	wrapDraw()